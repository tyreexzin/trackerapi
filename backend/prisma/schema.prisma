// backend/prisma/schema.prisma

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Seller {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // MUDANÇA: O padrão agora é uuid()
  apiKey String @unique @default(uuid())

  pixels     Pixel[]
  bots       Bot[]
  pressels   Pressel[]
  checkouts  Checkout[]
  settings   Setting?
  clicks     Click[]
  transactions Transaction[]

  @@map("sellers")
}

model Setting {
  // MUDANÇA: ID agora é um número auto-incremental
  id       Int    @id @default(autoincrement())
  seller   Seller @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  sellerId String @unique

  pix_provider_primary    String?
  pix_provider_secondary  String?
  pix_provider_tertiary   String?
  pushinpay_token         String?
  cnpay_public_key        String?
  cnpay_secret_key        String?
  oasyfy_public_key       String?
  oasyfy_secret_key       String?
  syncpay_client_id       String?
  syncpay_client_secret   String?
  stripe_public_key     String?
  stripe_secret_key     String?

  @@map("settings")
}

model Pixel {
  // MUDANÇA: ID agora é um número auto-incremental
  id             Int      @id @default(autoincrement())
  account_name   String
  pixel_id       String
  meta_api_token String
  seller         Seller   @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  sellerId       String

  pressels  Pressel[]  @relation("PresselPixels")
  checkouts Checkout[] @relation("CheckoutPixels")

  @@map("pixels")
}

model Bot {
  // MUDANÇA: ID agora é um número auto-incremental
  id        Int      @id @default(autoincrement())
  bot_name  String
  bot_token String
  seller    Seller   @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  sellerId  String
  pressels  Pressel[]

  @@map("bots")
}

model Pressel {
  // MUDANÇA: ID agora é um número auto-incremental
  id             Int      @id @default(autoincrement())
  name           String
  white_page_url String?
  seller         Seller   @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  sellerId       String
  bot            Bot      @relation(fields: [botId], references: [id])
  // MUDANÇA: botId agora é um número
  botId          Int
  pixels         Pixel[]  @relation("PresselPixels")
  clicks         Click[]

  @@map("pressels")
}

model Checkout {
  // MUDANÇA: ID agora é um número auto-incremental
  id                Int      @id @default(autoincrement())
  name              String
  product_name      String
  redirect_url      String
  value_type        String
  fixed_value_cents Int?
  seller            Seller   @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  sellerId          String
  
  pixels    Pixel[]    @relation("CheckoutPixels")
  clicks    Click[]

  @@map("checkouts")
}

model Click {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  seller    Seller   @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  sellerId  String

  // MUDANÇA: presselId e checkoutId agora são números
  presselId  Int?
  pressel    Pressel?  @relation(fields: [presselId], references: [id])
  checkoutId Int?
  checkout   Checkout? @relation(fields: [checkoutId], references: [id])

  referer    String?
  user_agent String?
  fbclid     String?
  fbp        String?
  fbc        String?
  utm_source   String?
  utm_medium   String?
  utm_campaign String?
  utm_content  String?
  utm_term     String?

  transaction Transaction?

  @@map("clicks")
}

model Transaction {
  // MUDANÇA: ID agora é um número auto-incremental
  id           Int      @id @default(autoincrement())
  clickId      String   @unique
  click        Click    @relation(fields: [clickId], references: [id])
  seller       Seller   @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  sellerId     String
  
  status       String   @default("pending")
  pix_value    Float
  provider     String
  transaction_id_provider String

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("transactions")
}